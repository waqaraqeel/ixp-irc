ahis is an informal roadmap - no promise, just here to remind me what I want to do

ROADMAP

Remove .packed for Inet and all its subclass as we now had addpath getting in the way.

In no particular order:
- provide an helper program able to read MRT dumps and announce them too.
- route refresh
- operational draft support
- provide easy integration with http://www.spamhaus.org/bgpf/ and http://www.spamhaus.org/drop/
- let the forked process indicate when it has finished and do not kill it before then
- split the neighborg api message sent from the forked process
- if we define the same route twice in the configuration we will/may send them both .. 
- Attributes / MultiAttributes API ?
- warn if an as-path has the router ASN on an ibgp connection
- some of the match condition of flows currently take list or numeric tests, they should always take both, refactor
- reading stderr from forked process and displaying via the self.logger class
- NotificationID
- on unhandled exception, stop all the workers
- look at tox http://tox.testrun.org/latest/
- have a compiled configuration format with no parsing of route but raw data ?
- need to check if we can prevent the duplication of the peer routes (which are already defined in the neighbor)
- peer.reload should it be called peer.route_update (just have a guard to prevent route update when reloading the configuration)
- do we need to have a guard to prevent route update when reloading the configuration
- Prefix.__init__ can raise ValueError make sure it is well handled
- cache generated nlri and attributes (with and without asn4)
- change all announcement like announce in Update to be function and not class method (and change name .:p)
- move logic code in read_message into peer main loop
- detect duplicate logging lines and just announce the number of repeat
- in neighbor store all the message in a dict and not rib, operation and route-refresh

Important
* write the documentation, and do not rely on the example and the site wiki (argh ...)
* look ai all the XXX: and XXX: FIXME: in the code
